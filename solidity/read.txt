블록체인과 솔리디티

-블록체인

블록 : 데이터의 집합
블록체인은 사용자가 동일하게 가지고 있다. (누군가 한 사람이 다른 정보를 가지고 있다면 그 정보는 틀린 것이 됨.)
정보 개방으로 보안을 유지 (폐쇄적x)

-머클트리
2진 트리
두 개의 차일드 노드가 합쳐 상위 노드가 됨
리프값이 바뀌면 머클루트값이 변함 (무결성 보존)
라이트 노드: 머클 루트를 가진 노드
머클 루트 값이 다른 노드가 오면 거절하기 때문에 휴대폰 등의 성능이 떨어지는 기기에서도 사용 가능
데이터가 존재하는지 여부는 부모노드를 통해 할 수 있다

-암호화폐 (비트 코인, 이더리움)
가치 전달
조작될 수 없는 환경에서 A->B 계좌 송금은 되돌릴 수 없으므로 가치 있음
금전 -> 데이터
이더리움과 스마트 컨트랙트
스마트 컨트랙트 : 계약서
분산 애플리케이션 (Decentralized Application)

-블록체인과 이더리움의 문제점
프라이버시 문제 : 조작 불가능
트랜잭션 코스트 : gas라는 수수료 사용자가 내야함
트랜잭션 스피드 : 중앙화된 시스템에 비해 속도가 느림, 약 10번 정도의 컨펌이 나야 효력이 있음 (시간상 약 3분)
블록 사이즈: 모든 사람들이 같은 정보를 가지고 있어야함. 매 달 2G의 블록이 생김
블록체인에 적합한 서비스가 있음

-솔리디티
스마트 컨트랙트를 만들기 위한 언어
Ethereum Virtual Machine 을 타겟으로 설계되어있음
정적 타입
상속, 라이브러리, 유저 정의 지원
https://remix.ethereum.org

-특징
튜링 완전: 반복문과 제어문을 사용할 수 있다
msg.sender: 메세지를 보내는 주소
msg.value: 메세지에 보낼 값

-스마트 컨트랙트의 구조
// 1. 컨트랙트 선언
contract Sample {
    // 2. 상태 변수 선언
    uint256 data;
    address owner;
    
    // 3. 이벤트 정의
    event logData(uint256 dataToLog);
    
    // 4. 함수 변경자 정의
    modifier onlyOwner() {
        if(msg.sender != owner) revert();
        _;
    }
    
    // 5. 생성자
    function Sample(uint256 initData, address initOwner) {
        data = initData;
        onwer = initOwner;
    }
    
    // 6. 함수(메소드) 정의
    function getData() returns (uint256 returned) {
        return data;
    }
    function setData(uint256 newData) onlyOwner {
        logData(newData);
        data = newData;
    }
}

-솔리디티 데이터 타입
String: utf로 인코딩 되어 알아보기 쉽게됨 ,bytes12 
동적배열, 정적 배열 사용 가능
인터페이스: 추상 계층 사용 가능
모디파이어(데코레이터) 함수를 실행 시키는 조건으로 한정자를 사용

-데이터 위치
Storage 상태변수,로컬변수(전역변수) - 블록에 저장
Memory 로컬변수 - 사용 후 휘발

-가시성
누가 접근할 수 있는지 정의
External:This.f() 로 불러옴
public
internal:내부적으로만 사용 가능,This 사용 불가
Private:Internal 과 비슷하지만 상송으로 사용 불가
